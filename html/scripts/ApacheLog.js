// Generated by CoffeeScript 1.6.3
(function() {
  var ApacheLog;

  ApacheLog = (function() {
    var getSeconds, get_long_line, get_short_line, parseLine, splitTailText, tailToArray;

    function ApacheLog() {}

    getSeconds = function(timeString) {
      var a;
      a = timeString.split(":");
      return 3600 * a[0] + 60 * a[1] + 1 * a[2];
    };

    tailToArray = function(tailText) {
      var line, _i, _len, _ref, _results;
      _ref = splitTailText(tailText);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        _results.push(parseLine(line));
      }
      return _results;
    };

    parseLine = function(line) {
      var a, o;
      a = line.split(/\s+/);
      return o = {
        line: line,
        time: a[2],
        timeSec: getSeconds(a[2]) + Math.random(),
        ip: a[5],
        method: a[10],
        request: a[11],
        response: a[13],
        size: a[14],
        userAgent: a[16]
      };
    };

    splitTailText = function(text) {
      var a;
      a = text.split("\n");
      a.pop();
      return a.slice(1);
    };

    get_short_line = function(o, j) {
      var text;
      text = "" + (toStr(j, 4)) + "  " + o.time + "   " + (o.timeSec.toFixed(2)) + "   " + (toStr(o.method, 5)) + " " + (toStr(o.response, 5)) + " " + (toStr(o.size, 10));
      if (o.method === "not") {
        text += "" + o.request + "<br/>";
        text += "" + o.line + "<br/>";
      }
      return text;
    };

    get_long_line = function(o, j) {
      var text;
      return text = "" + j + " " + o.line;
    };

    ApacheLog.prototype.getCurrentTime = function() {
      var d;
      d = new Date();
      return "" + (d.getHours()) + ":" + (d.getMinutes()) + ":" + (d.getSeconds()) + "." + (d.getMilliseconds());
    };

    ApacheLog.prototype.getCurrentSec = function() {
      var d;
      d = new Date();
      return 3600 * d.getHours() + 60 * d.getMinutes() + d.getSeconds() + 0.001 * d.getMilliseconds();
    };

    ApacheLog.prototype.getPastRecords = function(backSec, spanSec) {
      var i, now, o, _i, _len, _ref, _results;
      now = Math.round(this.getCurrentSec());
      _ref = this.LOG;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        o = _ref[i];
        if (now - o.timeSec > backSec && now - o.timeSec < (backSec + spanSec)) {
          _results.push(get_short_line(o, i));
        }
      }
      return _results;
    };

    ApacheLog.prototype.addText = function(text) {
      return this.LOG = tailToArray(text);
    };

    ApacheLog.prototype.getShortLog = function() {
      var j, o;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.LOG;
        _results = [];
        for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {
          o = _ref[j];
          _results.push(get_short_line(o, j));
        }
        return _results;
      }).call(this)).join("\n");
    };

    ApacheLog.prototype.getLongLog = function() {
      var j, o;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.LOG;
        _results = [];
        for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {
          o = _ref[j];
          _results.push(get_long_line(o, j));
        }
        return _results;
      }).call(this)).join("\n");
    };

    ApacheLog.prototype.getServerTimeDiff = function() {
      return this.getCurrentSec() - this.getLastTimeSec();
    };

    ApacheLog.prototype.getTimeLength = function() {
      return this.getLastTimeSec() - this.getFirstTimeSec();
    };

    ApacheLog.prototype.getFirstTime = function() {
      return this.LOG[0].time;
    };

    ApacheLog.prototype.getFirstTimeSec = function() {
      return this.LOG[0].timeSec;
    };

    ApacheLog.prototype.getLastTime = function() {
      return this.LOG[this.count() - 1].time;
    };

    ApacheLog.prototype.getLastTimeSec = function() {
      return this.LOG[this.count() - 1].timeSec;
    };

    ApacheLog.prototype.count = function() {
      return this.LOG.length;
    };

    ApacheLog.prototype.getRecordsPerSecond = function() {
      return this.count() / this.getTimeLength();
    };

    ApacheLog.prototype.getSummary = function() {
      var error;
      try {
        return "<pre style=\"font-size:20px;\">\n                                         Current Time:\n" + (this.getCurrentTime()) + " " + (this.getCurrentSec()) + " Server Difference: " + (this.getServerTimeDiff().toFixed(2)) + "\n                                         -----------------------\n" + (this.count()) + "                              Requests\n" + (this.getFirstTime()) + " " + (this.getFirstTimeSec()) + "\n" + (this.getLastTime()) + " " + (this.getLastTimeSec()) + "\n" + (this.getTimeLength().toFixed(2)) + "           seconds\n                                         -----------------------\n" + (this.getRecordsPerSecond().toFixed(2)) + "     Requests Per Second\n                                         </pre>";
      } catch (_error) {
        error = _error;
        return "<pre style=\"font-size:20px; color:red\">\n-----------------------\n" + (error.toString()) + "\n-----------------------\n</pre>";
      }
    };

    return ApacheLog;

  })();

}).call(this);

/*
//@ sourceMappingURL=ApacheLog.map
*/
